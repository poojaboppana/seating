<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Event Fetcher</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 20px;
            align-content: center;
            justify-content: center;
        }

        h1 {
            text-align: center;
            color: #333;
            font-size: 40px;
            text-shadow: 2px 2px blue;
        }

        #event-list {
            list-style-type: none;
            padding: 0;
            display: grid;
            grid-template-columns: repeat(2,1fr);
            align-items: center; 
            margin-left: 100px;
           
            
        }

        .event-item {
            width: 100%;
            max-width: 400px;
            padding: 40px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            background-color: rgb(192, 255, 197);
            border: 1px solid blue;
            border-top: 20px solid rgb(165, 165, 236);
            text-align: center;
            font-size: 20px;
            margin: 10px 0;
            transition: box-shadow 0.3s;
        }

        .event-item:hover {
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        }

        .event-item strong {
            color: #007BFF;
        }

        .event-item p {
            margin: 5px 0;
            color: #555;
        }
    </style>
</head>
<body>
    <h1>Ongoing Events</h1>
    <ul id="event-list"></ul>

    <script>
        async function fetchOngoingEvents() {
            try {
                const response = await fetch('http://localhost:3000/events');
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const events = await response.json();

                let currentTime = new Date();
                console.log(`Current Time: ${currentTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: false })}`);

                const eventList = document.getElementById('event-list');
                events.forEach(event => {
                    const endDateTime = parseEventEndTime(event);
                    if (endDateTime && endDateTime > currentTime) {
                        const listItem = document.createElement('li');
                        listItem.className = 'event-item';
                        listItem.innerHTML = `
                            <strong>Event Name:</strong> ${event.eventName}<br>
                            <strong>Start Time:</strong> ${event.startTime}<br>
                            <strong>End Time:</strong> ${endDateTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: false })}<br>
                            <strong>Date:</strong> ${new Date(event.eventDate).toLocaleDateString()}<br>
                            <strong>Location:</strong> ${event.location || 'N/A'}<br>
                            <strong>Total Chairs Available:</strong> ${event.chairsAvailable || 'N/A'}
                        `;
                        eventList.appendChild(listItem);
                    }
                });
            } catch (error) {
                console.error('Error fetching events:', error);
            }
        }

        function parseEventEndTime(event) {
            const dateString = event.eventDate;
            const endTimeString = event.endTime;

            if (endTimeString) {
                const [hours, minutes] = endTimeString.split(':');
                const endDateTimeString = `${dateString.split('T')[0]}T${hours}:${minutes}:00.000Z`;
                const endDateTime = new Date(endDateTimeString);

                if (isNaN(endDateTime.getTime())) {
                    console.error(`Invalid Date for event: ${event.eventName}, End Time String: ${endDateTimeString}`);
                    return null;
                }
                return endDateTime;
            }
            return null;
        }

        fetchOngoingEvents();
    </script>
</body>
</html>
